{{- /*
Copyright 2021-2023 Hewlett Packard Enterprise Development LP
*/ -}}
{{- range $name, $options := .Values.ingresses }}
{{- if $options.policies.spire }}
{{- $policy := printf "%s-%s" $name "-spire.policy"}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-policy-{{ $name }}-spire
  namespace: {{ $.Release.Namespace }}
data:
  policy.rego: |-
    # Default return a 403 unless any of the allows are true
  {{- if $.Values.opa.xnamePolicy.enabled }}
    # Spire OPA Policy (XNAME Validation Enabled)
  {{- else }}
    # Spire OPA Policy
  {{- end}}
      package istio.authz
      import input.attributes.request.http as http_request
      import future.keywords.in


    # Allow access to the spire jwks key data.
      allow { startswith(original_path, "/spire-jwks") }

    # The path being requested from the user. When the envoy filter is configured for
    # SIDECAR_INBOUND this is: http_request.headers["x-envoy-original-path"].
    # When configured for GATEWAY this is http_request.path
      original_path = o_path {
          o_path := http_request.path
      }

    # Check if there is an authorization header and split the type from token
      found_auth = {"type": a_type, "token": a_token} {
          [a_type, a_token] := split(http_request.headers.authorization, " ")
      }

      spire_methods := {
        "bos": [
        {{- if and (eq $.Values.opa.xnamePolicy.bos true) (eq $.Values.opa.xnamePolicy.enabled true) }}
          {"method": "PATCH", "path": sprintf("^/apis/bos/v./components/%v$", [parsed_spire_token.xname])},
        {{- else }}
          {"method": "PATCH", "path": `^/apis/bos/v./components/.*$`},
        {{- end }}
        ],
        "cfs": [
        {{- if and (eq $.Values.opa.xnamePolicy.cfs true) (eq $.Values.opa.xnamePolicy.enabled true) }}
          {"method": "PATCH", "path": sprintf("^/apis/cfs/components/%v$", [parsed_spire_token.xname])},
          {"method": "PATCH", "path": sprintf("^/apis/cfs/v./components/%v$", [parsed_spire_token.xname])},
        {{- else }}
          {"method": "PATCH", "path": `^/apis/cfs/components/.*$`},
          {"method": "PATCH", "path": `^/apis/cfs/v./components/.*$`},
        {{- end }}
        ],
        "cps": [
          {"method": "GET",  "path": `^/apis/v2/cps/transports`},
          {"method": "POST",  "path": `^/apis/v2/cps/contents$`},
          {"method": "POST",  "path": `^/apis/v2/cps/transports$`},
        ],
        "cos-config": [
          {"method": "GET", "path": `^/apis/v2/cos/configs$`},
        ],
        "dvs": [
        {{- if and (eq $.Values.opa.xnamePolicy.dvs true) (eq $.Values.opa.xnamePolicy.enabled true) }}
          {"method": "GET", "path": sprintf("^/apis/hmnfd/hmi/v2/subscriptions/%v$", [parsed_spire_token.xname])},
          {"method": "POST", "path": sprintf("^/apis/hmnfd/hmi/v2/subscriptions/%v/agents/", [parsed_spire_token.xname])},
          {"method": "PATCH", "path": sprintf("^/apis/hmnfd/hmi/v2/subscriptions/%v/agents/", [parsed_spire_token.xname])},
          {"method": "DELETE", "path": sprintf("^/apis/hmnfd/hmi/v2/subscriptions/%v/agents/", [parsed_spire_token.xname])},
          {"method": "PATCH", "path": sprintf("^/apis/smd/hsm/v2/State/Components/%v/SoftwareStatus$", [parsed_spire_token.xname])},
          {{- else }}
          {"method": "PATCH", "path": `^/apis/smd/hsm/v2/State/Components/.*/SoftwareStatus$`},
          {"method": "GET", "path": `^/apis/hmnfd/hmi/v2/subscriptions/.*$`},
          {"method": "POST", "path": `^/apis/hmnfd/hmi/v2/subscriptions/.*$`},
          {"method": "PATCH", "path": `^/apis/hmnfd/hmi/v2/subscriptions/.*$`},
          {"method": "DELETE", "path": `^/apis/hmnfd/hmi/v2/subscriptions/.*$`},
          {{- end }}
          # These pass xnames via POST. This will be removed once the v2 API is being used.
          {"method": "POST", "path": `^/apis/hmnfd/hmi/v1/subscribe$`},

          #SMD -> GET everything,  DVS needs SoftwareStatus.  REVOKED permission to update BulkSoftwareStatus
          {"method": "GET",   "path": `^/apis/smd/hsm/v2/.*$`},
          {"method": "HEAD",  "path": `^/apis/smd/hsm/v2/.*$`},

          #HMNFD -> subscribe only, cannot create state change notifications
          {"method": "GET",   "path": `^/apis/hmnfd/hmi/v1/subscriptions$`},
          {"method": "HEAD",  "path": `^/apis/hmnfd/hmi/v1/subscriptions$`},
          {"method": "PATCH", "path": `^/apis/hmnfd/hmi/v1/subscribe$`},
          {"method": "DELETE","path": `^/apis/hmnfd/hmi/v1/subscribe$`},
        ],
        "ckdump": [
        {{- if and (eq $.Values.opa.xnamePolicy.ckdump true) (eq $.Values.opa.xnamePolicy.enabled true) }}
            {"method": "PUT", "path": sprintf("^/apis/v2/nmd/status/%v$", [parsed_spire_token.xname])},
          {{- else }}
            {"method": "PUT", "path": `^/apis/v2/nmd/status/.*$`},
          {{- end }}
        ],
        "tpm-provisioner": [
        {{- if and (eq $.Values.opa.xnamePolicy.tpmProvisioner true) (eq $.Values.opa.xnamePolicy.enabled true) }}
            {"method": "GET", "path": sprintf("^/apis/tpm-provisioner/authorize?xname=%v&type=[A-Za-z0-9]*$", [parsed_spire_token.xname])},
        {{- else}}
            {"method": "GET", "path": `^/apis/tpm-provisioner/authorize.*$`},
        {{- end}}
            {"method": "POST", "path": `^/apis/tpm-provisioner/challenge/request$`},
            {"method": "POST", "path": `^/apis/tpm-provisioner/challenge/submit$`},
        ],
        "wlm": [
            # VNID - VNI reservation
            {"method": "GET", "path": `^/apis/vnid/.*$`},
            {"method": "HEAD", "path": `^/apis/vnid/.*$`},
            {"method": "POST", "path": `^/apis/vnid/.*$`},
            {"method": "DELETE", "path": `^/apis/vnid/.*$`},
            # jackaloped - scalable startup
            {"method": "GET", "path": `^/apis/jackaloped/.*$`},
            {"method": "HEAD", "path": `^/apis/jackaloped/.*$`},
            {"method": "POST", "path": `^/apis/jackaloped/.*$`},
            {"method": "DELETE", "path": `^/apis/jackaloped/.*$`},
            # ogopogod - DRC2
            {"method": "GET", "path": `^/apis/ogopogod/.*$`},
            {"method": "HEAD", "path": `^/apis/ogopogod/.*$`},
            {"method": "POST", "path": `^/apis/ogopogod/.*$`},
            {"method": "DELETE", "path": `^/apis/ogopogod/.*$`},
        ],
        "heartbeat": [
        {{- if and (eq $.Values.opa.xnamePolicy.heartbeat true) (eq $.Values.opa.xnamePolicy.enabled true) }}
          {"method": "POST", "path": sprintf("^/apis/hbtd/hmi/v1/heartbeat/%v$", [parsed_spire_token.xname])},
          {{- else }}
          {"method": "POST", "path": `^/apis/hbtd/hmi/v1/heartbeat$`},
          {"method": "POST", "path": `^/apis/hbtd/hmi/v1/heartbeat/.*$`},
          {{- end }}
          {"method": "GET", "path": `^/apis/hbtd/hmi/v1/params$`},
        ]
      }

      isValid(resp) := p {
        [v, _, p] := io.jwt.decode_verify(found_auth.token, {"cert": resp.raw_body, "aud": "system-compute"})
        v == true
      }

       verify_payload := payload {
                responses := [{{- range $.Values.jwtValidation.spire.jwksUris }}http.send({"method": "get", "url": "{{.}}", "cache": true, "tls_ca_cert_file": "/jwtValidationFetchTls/certificate_authority.crt", "raise_error": false}),{{- end }}]

                some response in responses
                  payload := isValid(response)
      }

    {{- if $.Values.opa.xnamePolicy.enabled }}
    # Spire With XNAME Validation
    # If the auth type is bearer, decode the JWT
      parsed_spire_token = {"payload": payload, "xname": xname} {
          found_auth.type == "Bearer"

          payload = verify_payload

          # Verify that the issuer is as expected.
          allowed_issuers := [
      {{- range $key, $value := $.Values.jwtValidation.spire.issuers }}
            "{{ $value }}",
      {{- end }}
          ]
          allowed_issuers[_] = payload.iss

          xname := regex.split("/", payload.sub)[4]
      }

    # Validate claims for SPIRE issued JWT tokens with xname support
      allow {
          s :=  replace(parsed_spire_token.payload.sub, parsed_spire_token.xname, "XNAME")

          # Test subject matches destination
          perm := sub_match[s][_]
          perm.method = http_request.method
          regex.match(perm.path, original_path)
      }

      sub_match = {
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/bos-reporter": spire_methods["bos"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/cfs-state-reporter": spire_methods["cfs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/ckdump": spire_methods["ckdump"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/ckdump_helper": spire_methods["ckdump"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/cpsmount": spire_methods["cps"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/cpsmount_helper": spire_methods["cps"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/cos-config-helper": spire_methods["cos-config"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/dvs-hmi": spire_methods["dvs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/dvs-map": spire_methods["dvs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/heartbeat": spire_methods["heartbeat"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/orca": spire_methods["dvs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/tpm-provisioner": spire_methods["tpm-provisioner"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/XNAME/workload/wlm": spire_methods["wlm"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/XNAME/workload/bos-reporter": spire_methods["bos"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/XNAME/workload/cfs-state-reporter": spire_methods["cfs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/XNAME/workload/cpsmount": spire_methods["cps"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/XNAME/workload/cpsmount_helper": spire_methods["cps"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/XNAME/workload/cos-config-helper": spire_methods["cos-config"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/XNAME/workload/dvs-hmi": spire_methods["dvs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/XNAME/workload/dvs-map": spire_methods["dvs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/XNAME/workload/heartbeat": spire_methods["heartbeat"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/XNAME/workload/orca": spire_methods["dvs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/XNAME/workload/tpm-provisioner": spire_methods["tpm-provisioner"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/storage/XNAME/workload/cfs-state-reporter": spire_methods["cfs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/storage/XNAME/workload/heartbeat": spire_methods["heartbeat"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/storage/XNAME/workload/tpm-provisioner": spire_methods["tpm-provisioner"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/bos-reporter": spire_methods["bos"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/cfs-state-reporter": spire_methods["cfs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/ckdump": spire_methods["ckdump"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/ckdump_helper": spire_methods["ckdump"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/cpsmount": spire_methods["cps"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/cpsmount_helper": spire_methods["cps"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/cos-config-helper": spire_methods["cos-config"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/dvs-hmi": spire_methods["dvs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/dvs-map": spire_methods["dvs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/heartbeat": spire_methods["heartbeat"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/orca": spire_methods["dvs"],
          "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/XNAME/workload/tpm-provisioner": spire_methods["tpm-provisioner"],
      }

    {{- else }}
    # Spire Without XNAME Validation
    # If the auth type is bearer, decode the JWT
    parsed_spire_token = {"payload": payload} {
        found_auth.type == "Bearer"

        payload := verify_payload

        # Verify that the issuer is as expected.
        allowed_issuers := [
    {{- range $key, $value := $.Values.jwtValidation.spire.issuers }}
          "{{ $value }}",
    {{- end }}
        ]
        allowed_issuers[_] = payload.iss
    }

    # Validate claims for SPIRE issued JWT tokens
    allow {
        # Parse subject
        s := parsed_spire_token.payload.sub

        # Test subject matches destination
        perm := sub_match[s][_]
        perm.method = http_request.method
        regex.match(perm.path, original_path)
    }

    sub_match = {
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/bos-reporter": spire_methods["bos"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/cfs-state-reporter": spire_methods["cfs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/ckdump": spire_methods["ckdump"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/ckdump_helper": spire_methods["ckdump"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/cpsmount": spire_methods["cps"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/cpsmount_helper": spire_methods["cps"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/cos-config-helper": spire_methods["cos-config"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/dvs-hmi": spire_methods["dvs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/dvs-map": spire_methods["dvs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/heartbeat": spire_methods["heartbeat"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/orca": spire_methods["dvs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/tpm-provisioner": spire_methods["tpm-provisioner"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/compute/workload/wlm": spire_methods["wlm"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/workload/bos-reporter": spire_methods["bos"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/workload/cfs-state-reporter": spire_methods["cfs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/workload/cpsmount": spire_methods["cps"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/workload/cpsmount_helper": spire_methods["cps"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/workload/cos-config-helper": spire_methods["cos-config"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/workload/dvs-hmi": spire_methods["dvs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/workload/dvs-map": spire_methods["dvs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/workload/heartbeat": spire_methods["heartbeat"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/workload/orca": spire_methods["dvs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/ncn/workload/tpm-provisioner": spire_methods["tpm-provisioner"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/storage/workload/cfs-state-reporter": spire_methods["cfs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/storage/workload/heartbeat": spire_methods["heartbeat"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/storage/workload/tpm-provisioner": spire_methods["tpm-provisioner"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/bos-reporter": spire_methods["bos"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/cfs-state-reporter": spire_methods["cfs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/ckdump": spire_methods["ckdump"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/ckdump_helper": spire_methods["ckdump"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/cpsmount": spire_methods["cps"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/cpsmount_helper": spire_methods["cps"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/cos-config-helper": spire_methods["cos-config"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/dvs-hmi": spire_methods["dvs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/dvs-map": spire_methods["dvs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/heartbeat": spire_methods["heartbeat"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/orca": spire_methods["dvs"],
        "spiffe://{{ $.Values.jwtValidation.spire.trustDomain }}/uan/workload/tpm-provisioner": spire_methods["tpm-provisioner"],
    }
    {{- end }}
{{- end }}
{{- end }}
