{{- /*
Copyright 2021-2022 Hewlett Packard Enterprise Development LP
*/ -}}
{{- range $name, $options := .Values.ingresses }}
{{- if $options.policies.keycloak.admin }}
{{- $policy := printf "%s-%s" $name "-keycloak-admin.policy"}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-policy-{{ $name }}-keycloak-admin
  namespace: {{ $.Release.Namespace }}
data:
  policy.rego: |-
    # Keycloak Admin OPA Policy
    package istio.authz
    import input.attributes.request.http as http_request


    # Whitelist traffic to the Neuxs web UI since it uses Keycloak for authentication.
    allow {
        http_request.headers["x-envoy-decorator-operation"] = "nexus.nexus.svc.cluster.local:80/*"
    }

    # Whitelist traffic to the Grafana web UI since it uses Keycloak for authentication.
    allow {
        http_request.headers["x-envoy-decorator-operation"] = "cray-sysmgmt-health-grafana.sysmgmt-health.svc.cluster.local:80/*"
    }

    # Whitelist traffic to SMA Grafana web UI since it uses Keycloak for authentication.
    allow {
        http_request.headers["x-envoy-decorator-operation"] = "sma-grafana.services.svc.cluster.local:3000/*"
    }

    # Whitelist traffic to SMA Kibana web UI since it uses Keycloak for authentication.
    allow {
        http_request.headers["x-envoy-decorator-operation"] = "sma-kibana.services.svc.cluster.local:5601/*"
    }

    # The path being requested from the user. When the envoy filter is configured for
    # SIDECAR_INBOUND this is: http_request.headers["x-envoy-original-path"].
    # When configured for GATEWAY this is http_request.path
    original_path = o_path {
        o_path := http_request.path
    }

    # Whitelist Keycloak, since those services enable users to login and obtain
    # JWTs. vcs is also enabled here. Legacy services to be migrated or removed:
    #
    #     * VCS/Gitea
    #
    allow { startswith(original_path, "/keycloak") }
    allow { startswith(original_path, "/vcs") }

    # Allow cloud-init endpoints, as we do validation based on incoming IP.
    # In the future, these requests will come in via the TOR switches and ideally
    # not through the 'front door'.   This is an expansion to BSS.
    allow { startswith(original_path, "/meta-data") }
    allow { startswith(original_path, "/user-data") }
    allow { startswith(original_path, "/phone-home") }

    # Whitelist Nexus repository pods. Nexus uses it's own RBAC so open
    # all commands. Keycloak Gatekeeper is used to pass the tokens through
    allow { startswith(original_path, "/repository") }
    allow { startswith(original_path, "/v2") }
    allow { startswith(original_path, "/service/rest") }

    # Whitelist Capsules UI. The Capsules UI starts at a login page which validates user access by retrieving a valid
    # token from keycloak with the provided credentials.
    allow { startswith(original_path, "/capsules/") }

    # Whitelist gozerd (does its own MUNGE auth)
    allow { startswith(original_path, "/apis/gozerd/") }

    # This actually checks the JWT token passed in
    # has access to the endpoint requested
    allow {
        roles_for_user[r]
        required_admin_roles[r]
    }

    # This checks the JWT if it has tenant-admin role
    # also checks if the tenant header matches the group
    allow {
        roles_for_tenant[r]
        required_admin_roles[r]
        groups := parsed_kc_token.payload.groups[_]
        trim_suffix(groups, "-tenant-admin") == http_request.headers["tenant"]
    }

    # Check if there is an authorization header and split the type from token
    found_auth = {"type": a_type, "token": a_token} {
        [a_type, a_token] := split(http_request.headers.authorization, " ")
    }

    # Check if there is a forwarded access token header and split the type from token
    found_auth = {"type": a_type, "token": a_token} {
      a_token := http_request.headers["x-forwarded-access-token"]
      [_, payload, _] := io.jwt.decode(a_token)
      a_type := payload.typ
    }

    # If the auth type is bearer, decode the JWT
    parsed_kc_token = {"payload": payload} {
        found_auth.type == "Bearer"
        response := http.send({"method": "get", "url": "{{ $.Values.jwtValidation.keycloak.jwksUri }}", "cache": true, "tls_ca_cert_file": "/jwtValidationFetchTls/certificate_authority.crt", "raise_error": false})
        [_, _, payload] := io.jwt.decode_verify(found_auth.token, {"cert": response.raw_body, "aud": "shasta"})

        # Verify that the issuer is as expected.
        allowed_issuers := [
    {{- range $key, $value := $options.issuers }}
          "{{ $value }}",
    {{- end }}
        ]
        allowed_issuers[_] = payload.iss
    }

    # Get the users roles from the JWT token
    roles_for_user[r] {
        r := parsed_kc_token.payload.resource_access.shasta.roles[_]
    }

    # Get the users realm roles from the JWT token
    roles_for_tenant[r] {
        r := parsed_kc_token.payload.realm_access.roles[_]
    }

    # Determine if the path/verb requests is authorized based on the JWT roles
    required_admin_roles[r] {
        perm := admin_role_perms[r][_]
        perm.method = http_request.method
        regex.match(perm.path, original_path)
    }


    allowed_admin_methods := {
      "admin": [
          {"method": "GET",  "path": `.*`},
          {"method": "PUT",  "path": `.*`},
          {"method": "POST",  "path": `.*`},
          {"method": "DELETE",  "path": `.*`},
          {"method": "PATCH",  "path": `.*`},
          {"method": "HEAD",  "path": `.*`},
      ],
      "tenant-admin": [
          # BOS
          {"method": "GET",  "path": `^/apis/bos/v2$`}, # Allow access to version linkage
          {"method": "POST", "path": `^/apis/bos/v2/applystaged$`}, # POST allows tenants to continue booting specific components already staged
          {"method": "GET",  "path": `^/apis/bos/v2/components$`}, # GET allows a listing of all active components states
          {"method": "GET",  "path": `^/apis/bos/v2/components/.*$`}, # GET information on an individual component
          {"method": "GET",  "path": `^/apis/bos/v2/healthz$`}, # Allow tenant admins to know the overall health of the deployment
          {"method": "POST", "path": `^/apis/bos/v2/sessions$`}, # POST Creates a new BOSv2 Session
          {"method": "GET",  "path": `^/apis/bos/v2/sessions/.*$`}, # GET allows monitoring status of individual sessions
          {"method": "GET",  "path": `^/apis/bos/v2/sessions/.*?/status$`}, # Obtain more detailed status information for an individual session
          {"method": "GET",  "path": `^/apis/bos/v2/sessiontemplates$`}, # GET BOSv2 SessionTemplates (list all)
          {"method": "GET",  "path": `^/apis/bos/v2/sessiontemplates/.*?$`}, # GET BOSv2 SessionTemplates (obtain details about a specific session template)
          {"method": "GET",  "path": `^/apis/bos/v2/version$`} # GETs allow views on specific BOS version information
      ]
    }

    # Our list of endpoints we accept based on roles.
    # The admin roll can make any call.
    admin_role_perms = {
        "admin": allowed_admin_methods["admin"],
        "tenant-admin": allowed_admin_methods["tenant-admin"],
    }

{{- end }}
{{- end }}
