{{- /*
Copyright 2021-2025 Hewlett Packard Enterprise Development LP
*/ -}}
{{- range $name, $options := .Values.ingresses }}
{{- if $options.policies.keycloak.admin }}
{{- $policy := printf "%s-%s" $name "-keycloak-admin.policy"}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-policy-{{ $name }}-keycloak-admin
  namespace: {{ $.Release.Namespace }}
data:
  policy.rego: |-
    # Keycloak Admin OPA Policy
    package istio.authz
    import future.keywords.in
    import input.attributes.request.http as http_request

    # Whitelist traffic to the Neuxs web UI since it uses Keycloak for authentication.
    allow {
        http_request.headers["x-envoy-decorator-operation"] = "nexus.nexus.svc.cluster.local:80/*"
    }

    # Whitelist traffic to the Grafana web UI since it uses Keycloak for authentication.
    allow {
        http_request.headers["x-envoy-decorator-operation"] = "cray-sysmgmt-health-grafana.sysmgmt-health.svc.cluster.local:80/*"
    }

    # Whitelist traffic to SMA Grafana web UI since it uses Keycloak for authentication.
    allow {
        http_request.headers["x-envoy-decorator-operation"] = "sma-grafana.services.svc.cluster.local:3000/*"
    }

    # Whitelist traffic to SMA Kibana web UI since it uses Keycloak for authentication.
    allow {
        http_request.headers["x-envoy-decorator-operation"] = "sma-kibana.services.svc.cluster.local:5601/*"
    }

    # The path being requested from the user. When the envoy filter is configured for
    # SIDECAR_INBOUND this is: http_request.headers["x-envoy-original-path"].
    # When configured for GATEWAY this is http_request.path
    original_path = o_path {
        o_path := http_request.path
    }

    # Allow broad access to CMN LB for keycloak (CMN and NMN share Istio + OPA ingress stack in CSM 1.4.x), restrict to specific
    # endpoints otherwise
    allow
    {
        startswith(original_path, "/keycloak")
        startswith(http_request.host, "auth.cmn.")
    }

    allow
    {
        startswith(original_path, "/keycloak/realms/shasta/protocol/openid-connect/auth")
        # Mitigate CVE-2020-10770
        not regex.match(`^/keycloak/realms/[a-zA-Z0-9]+/protocol/openid-connect/.*request_uri=.*$`, original_path)
    }

    keycloak_oidc_paths := {
    "/keycloak/realms/shasta/protocol/openid-connect/token",
    "/keycloak/realms/shasta/protocol/openid-connect/userinfo",
    "/keycloak/realms/shasta/protocol/openid-connect/logout",
    "/keycloak/realms/shasta/protocol/openid-connect/certs",
    "/keycloak/realms/shasta/.well-known/openid-configuration"
    }

    allow {
        some x in keycloak_oidc_paths
        startswith(original_path, x)
    }

    allow {
        startswith(original_path, "/keycloak/resources")
        http_request.method in {"GET", "HEAD"}
    }

    # Allow paths for vault logins
    vault_login_paths := {
    "/v1/auth/jwt/login",
    "/v1/auth/kubernetes/login"
    }

    # Allow vault login
    allow {
        some x in vault_login_paths
        startswith(original_path, x)
        http_request.method == "POST"
        http_request.headers["x-envoy-decorator-operation"] = "cray-vault.vault.svc.cluster.local:8200/*"
    }

    # Allow vault access with a vault token
    allow {
        regex.match(`^hvs\.\S{24,}$`, http_request.headers["x-vault-token"])
        startswith(original_path, "/v1/")
        http_request.headers["x-envoy-decorator-operation"] = "cray-vault.vault.svc.cluster.local:8200/*"
    }

    # Allow all access to Gitea
    allow { startswith(original_path, "/vcs") }

    # Allow cloud-init endpoints, as we do validation based on incoming IP.
    # In the future, these requests will come in via the TOR switches and ideally
    # not through the 'front door'.   This is an expansion to BSS.
    allow {
        startswith(original_path, "/meta-data")
        http_request.method = "GET"
    }
    allow {
        startswith(original_path, "/user-data")
        http_request.method = "GET"
    }

    # Whitelist Nexus repository pods. Nexus uses it's own RBAC so open
    # all commands. Keycloak Gatekeeper is used to pass the tokens through
    allow { startswith(original_path, "/repository") }
    allow { startswith(original_path, "/v2") }
    allow { startswith(original_path, "/service/rest") }

    # Infrastructure Administrator Allow, without cray-tenant-name header
    allow {
        parsed_kc_token.payload.resource_access.shasta.roles[_] == "admin"
        not http_request.headers["cray-tenant-name"]
        some perm in allowed_admin_methods
        perm.method = http_request.method
        regex.match(perm.path, original_path)
    }

    # Infrastructure Administrator Allow, with cray-tenant-name header
    allow {
        parsed_kc_token.payload.resource_access.shasta.roles[_] == "admin"
        # Use an RFC1123 compliant tenant name
        regex.match("^[a-z0-9][a-z0-9\\-\\.]{1,251}[a-z0-9]$", http_request.headers["cray-tenant-name"])
        some perm in allowed_admin_methods
        perm.method = http_request.method
        regex.match(perm.path, original_path)
    }

    # Tenant Administrator Allow, require cray-tenant-name group matching
    allow {
        parsed_kc_token.payload.realm_access.roles[_] == "tenant-admin"
        some perm in allowed_tenant_admin_methods
        perm.method = http_request.method
        # Use an RFC1123 compliant tenant name
        regex.match("^[a-z0-9][a-z0-9\\-\\.]{1,251}[a-z0-9]$", http_request.headers["cray-tenant-name"])
        groups := parsed_kc_token.payload.groups[_]
        trim_suffix(groups, "-tenant-admin") == http_request.headers["cray-tenant-name"]
        regex.match(perm.path, original_path)
    }

    # Slingshot Admin Allow, with or without tenant header
    allow {
        parsed_kc_token.payload.resource_access["system-slingshot-client"].roles[_] == "slingshot-admin"
        some perm in allowed_slingshot_admin_methods
        perm.method = http_request.method
        regex.match(perm.path, original_path)
    }

    # Check if there is an authorization header and split the type from token
    found_auth = {"type": a_type, "token": a_token} {
        [a_type, a_token] := split(http_request.headers.authorization, " ")
    }

    # Check if there is a forwarded access token header and split the type from token
    found_auth = {"type": a_type, "token": a_token} {
      a_token := http_request.headers["x-forwarded-access-token"]
      [_, payload, _] := io.jwt.decode(a_token)
      a_type := payload.typ
    }

    # If the auth type is bearer, decode the JWT
    parsed_kc_token = {"payload": payload} {
        found_auth.type == "Bearer"
        response := http.send({"method": "get", "url": "{{ $.Values.jwtValidation.keycloak.jwksUri }}", "cache": true, "tls_ca_cert_file": "/jwtValidationFetchTls/certificate_authority.crt", "raise_error": false})
        [_, _, payload] := io.jwt.decode_verify(found_auth.token, {"cert": response.raw_body, "aud": "shasta"})

        # Verify that the issuer is as expected.
        allowed_issuers := [
    {{- range $key, $value := $options.issuers }}
          "{{ $value }}",
    {{- end }}
        ]
        allowed_issuers[_] = payload.iss
    }

    allowed_admin_methods := [
        {"method": "GET",  "path": `.*`},
        {"method": "PUT",  "path": `.*`},
        {"method": "POST",  "path": `.*`},
        {"method": "DELETE",  "path": `.*`},
        {"method": "PATCH",  "path": `.*`},
        {"method": "HEAD",  "path": `.*`},
    ]

    allowed_tenant_admin_methods := [
        # BOS
        {"method": "GET",  "path": `^/apis/bos/v2$`}, # Allow access to version linkage
        {"method": "POST", "path": `^/apis/bos/v2/applystaged$`}, # POST allows tenants to continue booting specific components already staged
        {"method": "GET",  "path": `^/apis/bos/v2/components$`}, # GET allows a listing of all active components states
        {"method": "GET",  "path": `^/apis/bos/v2/components/.*$`}, # GET information on an individual component
        {"method": "GET",  "path": `^/apis/bos/v2/healthz$`}, # Allow tenant admins to know the overall health of the deployment
        {"method": "GET",  "path": `^/apis/bos/v2/sessions$`}, # GET BOSv2 Sessions (list all)
        {"method": "POST", "path": `^/apis/bos/v2/sessions$`}, # POST Creates a new BOSv2 Session
        {"method": "GET",  "path": `^/apis/bos/v2/sessions/.*$`}, # GET allows monitoring status of individual sessions
        {"method": "GET",  "path": `^/apis/bos/v2/sessions/.*?/status$`}, # Obtain more detailed status information for an individual session
        {"method": "GET",  "path": `^/apis/bos/v2/sessiontemplates$`}, # GET BOSv2 SessionTemplates (list all)
        {"method": "GET",  "path": `^/apis/bos/v2/sessiontemplates/.*?$`}, # GET BOSv2 SessionTemplates (obtain details about a specific session template)
        {"method": "GET",  "path": `^/apis/bos/v2/version$`}, # GETs allow views on specific BOS version information
        # CFS
        {"method": "GET", "path": `^/apis/cfs/v3/configurations$`}, # GET allows listing one or all all configurations for this tenant
        {"method": "GET", "path": `^/apis/cfs/v3/configurations/.*$`}, # GET allows listing one or all all configurations for this tenant	
        {"method": "PUT", "path": `^/apis/cfs/v3/configurations/.*$`}, # PUT allows creating/overwriting a configuration
        {"method": "PATCH", "path": `^/apis/cfs/v3/configurations/.*$`}, # PATCH allows updating/overwriting a configuration
        {"method": "DELETE", "path": `^/apis/cfs/v3/configurations/.*$`} # DELETE allows deleting a configuration
    ]

    allowed_slingshot_admin_methods := [
        # Fabric Manager
        {"method": "DELETE", "path": `^/apis/fabric-manager/.*$`},
        {"method": "GET",    "path": `^/apis/fabric-manager/.*$`},
        {"method": "PATCH",  "path": `^/apis/fabric-manager/.*$`},
        {"method": "POST",   "path": `^/apis/fabric-manager/.*$`},
        {"method": "PUT",    "path": `^/apis/fabric-manager/.*$`}
    ]

{{- end }}
{{- end }}
