{{- /*
Copyright 2021-2022 Hewlett Packard Enterprise Development LP
*/ -}}
{{- range $name, $options := .Values.ingresses }}
{{- if $options.policies.keycloak.system }}
{{- $policy := printf "%s-%s" $name "-keycloak-system.policy"}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-policy-{{ $name }}-keycloak-system
  namespace: {{ $.Release.Namespace }}
data:
  policy.rego: |-
    # Keycloak System Gateway OPA Policy
    package istio.authz
    import future.keywords.in
    import input.attributes.request.http as http_request


    # The path being requested from the user. When the envoy filter is configured for
    # SIDECAR_INBOUND this is: http_request.headers["x-envoy-original-path"].
    # When configured for GATEWAY this is http_request.path
    original_path = o_path {
        o_path := http_request.path
    }

    # Allow broad access to CMN LB for keycloak (CMN and NMN share Istio + OPA ingress stack in CSM 1.3.x), restrict to specific
    # endpoints otherwise

    allow
    {
        startswith(original_path, "/keycloak")
        startswith(http_request.host, "auth.cmn.")
    }

    allow
    {
        startswith(original_path, "/keycloak/realms/shasta/protocol/openid-connect/auth")
        # Mitigate CVE-2020-10770
        not re_match(`^/keycloak/realms/[a-zA-Z0-9]+/protocol/openid-connect/.*request_uri=.*$`, original_path)
    }

    keycloak_oidc_paths := {
    "/keycloak/realms/shasta/protocol/openid-connect/token",
    "/keycloak/realms/shasta/protocol/openid-connect/userinfo",
    "/keycloak/realms/shasta/protocol/openid-connect/logout",
    "/keycloak/realms/shasta/protocol/openid-connect/certs",
    "/keycloak/realms/shasta/.well-known/openid-configuration"
    }

    allow {
    some x in keycloak_oidc_paths
    startswith(original_path, x)
    }

    allow {
    startswith(original_path, "/keycloak/resources")
    http_request.method in {"GET", "HEAD"}
    }

    # Allow all access to Gitea
    allow { startswith(original_path, "/vcs") }

    # Allow cloud-init endpoints, as we do validation based on incoming IP.
    # In the future, these requests will come in via the TOR switches and ideally
    # not through the 'front door'.   This is an expansion to BSS.
    allow { startswith(original_path, "/meta-data") }
    allow { startswith(original_path, "/user-data") }
    allow { startswith(original_path, "/phone-home") }

    # Whitelist Nexus repository pods. Nexus uses it's own RBAC so open
    # all commands. Keycloak Gatekeeper is used to pass the tokens through
    allow { startswith(original_path, "/repository") }
    allow { startswith(original_path, "/v2") }
    allow { startswith(original_path, "/service/rest") }

    # This actually checks that the JWT token passed in
    # has access to the endpoint requested
    allow {
        roles_for_user[r]
        required_system_roles[r]
    }

    # Check if there is an authorization header and split the type from token
    found_auth = {"type": a_type, "token": a_token} {
        [a_type, a_token] := split(http_request.headers.authorization, " ")
    }

    # Check if there is a forwarded access token header and split the type from token
    found_auth = {"type": a_type, "token": a_token} {
      a_token := http_request.headers["x-forwarded-access-token"]
      [_, payload, _] := io.jwt.decode(a_token)
      a_type := payload.typ
    }

    # If the auth type is bearer, decode the JWT
    parsed_kc_token = {"payload": payload} {
        found_auth.type == "Bearer"
        response := http.send({"method": "get", "url": "{{ $.Values.jwtValidation.keycloak.jwksUri }}", "cache": true, "tls_ca_cert_file": "/jwtValidationFetchTls/certificate_authority.crt"})
        [_, _, payload] := io.jwt.decode_verify(found_auth.token, {"cert": response.raw_body, "aud": "shasta"})

        # Verify that the issuer is as expected.
        allowed_issuers := [
    {{- range $key, $value := $options.issuers }}
          "{{ $value }}",
    {{- end }}
        ]
        allowed_issuers[_] = payload.iss
    }


    # Get the users roles from the JWT token
    roles_for_user[r] {
        r := parsed_kc_token.payload.resource_access.shasta.roles[_]
    }

    # Determine if the path/verb requests is authorized based on the JWT roles
    required_system_roles[r] {
        perm := system_role_perms[r][_]
        perm.method = http_request.method
        re_match(perm.path, original_path)
    }


    allowed_system_methods := {
      "system-pxe": [

      #BSS -> computes need to retrieve boot scripts
         {"method": "GET",  "path": `^/apis/bss/boot/v1/bootscript.*$`},
         {"method": "HEAD",  "path": `^/apis/bss/boot/v1/bootscript.*$`},
      ],
      "system-compute": [
        {"method": "PATCH",  "path": `^/apis/bos/v./components/.*$`},

        {"method": "PATCH",  "path": `^/apis/cfs/components/.*$`},
        {"method": "PATCH",  "path": `^/apis/cfs/v./components/.*$`},

        {"method": "GET",  "path": `^/apis/v2/cps/transports`},
        {"method": "POST",  "path": `^/apis/v2/cps/contents$`},
        {"method": "POST",  "path": `^/apis/v2/cps/transports$`},

        {"method": "PUT",  "path": `^/apis/v2/nmd/status/.*$`},

        #SMD -> GET everything, DVS currently needs to update BulkSoftwareStatus
        {"method": "GET",  "path": `^/apis/smd/hsm/v./.*$`},
        {"method": "HEAD",  "path": `^/apis/smd/hsm/v./.*$`},
        {"method": "PATCH",  "path": `^/apis/smd/hsm/v./State/Components/BulkSoftwareStatus$`},
        #HMNFD -> subscribe only, cannot create state change notifications
        {"method": "GET",  "path": `^/apis/hmnfd/hmi/v1/subscriptions$`},
        {"method": "HEAD",  "path": `^/apis/hmnfd/hmi/v1/subscriptions$`},
        {"method": "PATCH",  "path": `^/apis/hmnfd/hmi/v1/subscribe$`},
        {"method": "POST",  "path": `^/apis/hmnfd/hmi/v1/subscribe$`},
        {"method": "DELETE",  "path": `^/apis/hmnfd/hmi/v1/subscribe$`},
        {"method": "GET", "path": `^/apis/hmnfd/hmi/v2/subscriptions/.*$`},
        {"method": "POST", "path": `^/apis/hmnfd/hmi/v2/subscriptions/.*$`},
        {"method": "PATCH", "path": `^/apis/hmnfd/hmi/v2/subscriptions/.*$`},
        {"method": "DELETE", "path": `^/apis/hmnfd/hmi/v2/subscriptions/.*$`},
        #HBTD -> allow a compute to send a heartbeat
        {"method": "POST", "path": `^/apis/hbtd/hmi/v1/heartbeat$`},
        {"method": "POST", "path": `^/apis/hbtd/hmi/v1/heartbeat/.*$`},
        {"method": "GET", "path": `^/apis/hbtd/hmi/v1/params$`},
      ]
    }

    # Our list of endpoints we accept based on roles.
    system_role_perms = {
      "system-pxe": allowed_system_methods["system-pxe"],
      "system-compute": allowed_system_methods["system-compute"],
    }
{{- end }}
{{- end }}
