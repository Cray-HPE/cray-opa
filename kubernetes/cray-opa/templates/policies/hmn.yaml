{{- /*
Copyright 2022-2023 Hewlett Packard Enterprise Development LP
*/ -}}
{{- range $name, $options := .Values.ingresses }}
{{- if $options.policies.hmn }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-policy-{{ $name }}-hmn
  namespace: {{ $.Release.Namespace }}
data:
  policy.rego: |-
    # HMN OPA Policy
    package istio.authz
    import future.keywords.in
    import input.attributes.request.http as http_request

    # Whitelist traffic to HMS hmcollector
    allow {
        http_request.headers["x-envoy-decorator-operation"] = "cray-hms-hmcollector-ingress.services.svc.cluster.local:80/*"
    }

    # The path being requested from the user. When the envoy filter is configured for
    # SIDECAR_INBOUND this is: http_request.headers["x-envoy-original-path"].
    # When configured for GATEWAY this is http_request.path
    original_path = o_path {
        o_path := http_request.path
    }

    # Allow limited paths for Keycloak
    allow
    {
        startswith(original_path, "/keycloak/realms/shasta/protocol/openid-connect/auth")
        # Mitigate CVE-2020-10770
        not regex.match(`^/keycloak/realms/[a-zA-Z0-9]+/protocol/openid-connect/.*request_uri=.*$`, original_path)
    }

    keycloak_oidc_paths := {
    "/keycloak/realms/shasta/protocol/openid-connect/token",
    "/keycloak/realms/shasta/protocol/openid-connect/userinfo",
    "/keycloak/realms/shasta/protocol/openid-connect/logout",
    "/keycloak/realms/shasta/protocol/openid-connect/certs",
    "/keycloak/realms/shasta/.well-known/openid-configuration"
    }

    allow {
        some x in keycloak_oidc_paths
        startswith(original_path, x)
    }

    allow {
        startswith(original_path, "/keycloak/resources")
        http_request.method in {"GET", "HEAD"}
    }

    allow {
        roles_for_user[r]
        required_roles[r]
    }

    allow {
        system_slingshot_roles_for_user[r]
        required_roles[r]
    }

    # Check if there is an authorization header and split the type from token
    found_auth = {"type": a_type, "token": a_token} {
        [a_type, a_token] := split(http_request.headers.authorization, " ")
    }

    # If the auth type is bearer, decode the JWT
    parsed_kc_shasta_token = {"payload": payload} {
        found_auth.type == "Bearer"
        response := http.send({"method": "get", "url": "{{ $.Values.jwtValidation.keycloak.jwksUri }}", "cache": true, "tls_ca_cert_file": "/jwtValidationFetchTls/certificate_authority.crt", "raise_error": false})

        [_, _, payload] := io.jwt.decode_verify(found_auth.token, {"cert": response.raw_body, "aud": "shasta"})

        # Verify that the issuer is as expected.
        allowed_issuers := [
    {{- range $key, $value := $options.issuers }}
          "{{ $value }}",
    {{- end }}
        ]
        allowed_issuers[_] = payload.iss
    }

    parsed_kc_system_slingshot_client_token = {"payload": payload} {
        found_auth.type == "Bearer"
        response := http.send({"method": "get", "url": "{{ $.Values.jwtValidation.keycloak.jwksUri }}", "cache": true, "tls_ca_cert_file": "/jwtValidationFetchTls/certificate_authority.crt", "raise_error": false})

        [_, _, payload] := io.jwt.decode_verify(found_auth.token, {"cert": response.raw_body, "aud": "system-slingshot-client"})

        # Verify that the issuer is as expected.
        allowed_issuers := [
    {{- range $key, $value := $options.issuers }}
          "{{ $value }}",
    {{- end }}
        ]
        allowed_issuers[_] = payload.iss
    }

    # Get the users roles from the JWT token
    roles_for_user[r] {
        r := parsed_kc_shasta_token.payload.resource_access.shasta.roles[_]
    }

    # Get the system-slingshot user roles from the JWT token
    system_slingshot_roles_for_user[r] {
        r := parsed_kc_system_slingshot_client_token.payload.resource_access["system-slingshot-client"].roles[_]
    }

    # Determine if the path/verb requests is authorized based on the JWT roles
    required_roles[r] {
        perm := role_perms[r][_]
        perm.method = http_request.method
        regex.match(perm.path, original_path)
    }

    # Our list of endpoints we accept based on roles.
    role_perms = {
        "admin": allowed_methods["fabric-slingshot-admin"],
        "system-slingshot": allowed_methods["fabric-slingshot-admin"],
        "slingshot-admin" : allowed_methods["fabric-slingshot-admin"],
        "slingshot-operator" : allowed_methods["fabric-slingshot-operator"],
        "slingshot-guest" : allowed_methods["fabric-slingshot-guest"],
        "slingshot-security" : allowed_methods["fabric-slingshot-security"]
    }

    # Fabric Manager access
    allowed_methods := {
      "fabric-slingshot-admin": [
          {"method": "DELETE", "path": `^/apis/fabric-manager/.*$`},
          {"method": "GET", "path": `^/apis/fabric-manager/.*$`},
          {"method": "PATCH", "path": `^/apis/fabric-manager/.*$`},
          {"method": "POST", "path": `^/apis/fabric-manager/.*$`},
          {"method": "PUT", "path": `^/apis/fabric-manager/.*$`}
      ],
      "fabric-slingshot-operator": [
          {"method": "GET", "path": `^/apis/fabric-manager/.*$`},
          {"method": "PATCH", "path": `^/apis/fabric-manager/fabric/.*$`},
          {"method": "POST", "path": `^/apis/fabric-manager/fabric/.*$`},
          {"method": "PUT", "path": `^/apis/fabric-manager/fabric/.*$`},
          {"method": "PATCH", "path": `^/apis/fabric-manager/host-settings`},
          {"method": "POST", "path": `^/apis/fabric-manager/host-settings`},
          {"method": "PUT", "path": `^/apis/fabric-manager/host-settings`},
          {"method": "PATCH", "path": `^/apis/fabric-manager/switch-telemetry/.*$`},
          {"method": "POST", "path": `^/apis/fabric-manager/switch-telemetry/.*$`},
          {"method": "PUT", "path": `^/apis/fabric-manager/switch-telemetry/.*$`},
          {"method": "PATCH", "path": `^/apis/fabric-manager/telemetry/.*$`},
          {"method": "POST", "path": `^/apis/fabric-manager/telemetry/.*$`},
          {"method": "PUT", "path": `^/apis/fabric-manager/telemetry/.*$`}
      ],
      "fabric-slingshot-guest": [
          {"method": "GET", "path": `^/apis/fabric-manager/fabric/.*$`},
          {"method": "GET", "path": `^/apis/fabric-manager/host-settings`},
          {"method": "GET", "path": `^/apis/fabric-manager/telemetry/.*$`}
      ],
      "fabric-slingshot-security": [
          {"method": "GET", "path": `^/apis/fabric-manager/.*$`},
          {"method": "DELETE", "path": `^/apis/fabric-manager/certmgr/.*$`},
          {"method": "PATCH", "path": `^/apis/fabric-manager/certmgr/.*$`},
          {"method": "POST", "path": `^/apis/fabric-manager/certmgr/.*$`},
          {"method": "PUT", "path": `^/apis/fabric-manager/certmgr/.*$`},
          {"method": "PATCH", "path": `^/apis/fabric-manager/fabric/rosetta-auth-token`},
          {"method": "POST", "path": `^/apis/fabric-manager/fabric/rosetta-auth-token`},
          {"method": "PUT", "path": `^/apis/fabric-manager/fabric/rosetta-auth-token`},
          {"method": "PATCH", "path": `^/apis/fabric-manager/fabric/shasta-auth-token`},
          {"method": "POST", "path": `^/apis/fabric-manager/fabric/shasta-auth-token`},
          {"method": "PUT", "path": `^/apis/fabric-manager/fabric/shasta-auth-token`}
      ],
    }
{{- end }}
{{- end }}
