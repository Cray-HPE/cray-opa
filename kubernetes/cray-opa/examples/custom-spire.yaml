---
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-spire
  namespace: opa
data:
  policy.rego: |-
    # Custom Spire Policy
    package istio.authz
    import input.attributes.request.http as http_request


    # The path being requested from the user. When the envoy filter is configured for
    # SIDECAR_INBOUND this is: http_request.headers["x-envoy-original-path"].
    # When configured for GATEWAY this is http_request.path
    original_path = o_path {
        o_path := http_request.path
    }

    # Check if there is an authorization header and split the type from token
    found_auth = {"type": a_type, "token": a_token} {
        [a_type, a_token] := split(http_request.headers.authorization, " ")
    }

    custom_spire_methods := {
      "custom": [
        {"method": "DELETE", "path": `^/custom/api.*$`},
        {"method": "GET", "path": `^/custom/api.*$`},
        {"method": "HEAD", "path": `^/custom/api.*$`},
        {"method": "PATCH", "path": `^/custom/api.*$`},
        {"method": "POST", "path": `^/custom/api.*$`},
        {"method": "PUT", "path": `^/custom/api.*$`},
      ],
    }

    # If the auth type is bearer, decode the JWT
    parsed_spire_token = {"payload": payload, "xname": xname} {
        found_auth.type == "Bearer"
        response := http.send({"method": "get", "url": "https://istio-ingressgateway.istio-system.svc.cluster.local./keycloak/realms/shasta/protocol/openid-connect/certs", "cache": true, "tls_ca_cert_file": "/jwtValidationFetchTls/certificate_authority.crt"})
        [_, _, payload] := io.jwt.decode_verify(found_auth.token, {"cert": response.raw_body, "aud": "system-compute"})

        # Verify that the issuer is as expected.
        allowed_issuers := [
          - https://keycloak1
        ]
        allowed_issuers[_] = payload.iss

        xname := regex.split("/", payload.sub)[4]
    }

    # Validate claims for SPIRE issued JWT tokens with xname support
    allow {
        s :=  replace(parsed_spire_token.payload.sub, parsed_spire_token.xname, "XNAME")

        # Test subject matches destination
        perm := custom_sub_match[s][_]
        perm.method = http_request.method
        re_match(perm.path, original_path)
    }

    custom_sub_match = {
        "spiffe://shasta/compute/XNAME/workload/custom-spire-agent": custom_spire_methods["custom"],
    }
